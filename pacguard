#!/usr/bin/env python3
"""
Checks installed packages against Arch Security Tracker JSON feed.

"""

import requests
import pyalpm  # for vesion comparison 
import sys

ARCH_JSON_URL = "https://security.archlinux.org/json"


RED = "\033[91m"
YELLOW = "\033[93m"
GREEN = "\033[92m"
RESET = "\033[0m"

def get_installed_packages():
    """Return dict {name: version} of installed packages."""
    handle = pyalpm.Handle("/", "/var/lib/pacman")
    localdb = handle.get_localdb()
    return {pkg.name: pkg.version for pkg in localdb.pkgcache}

def load_security_data():
    """Download Arch Security Tracker JSON."""
    try:
        r = requests.get(ARCH_JSON_URL, timeout=20)
        r.raise_for_status()
        return r.json()
    except Exception as e:
        print(f"{RED}[!] Failed to fetch security data: {e}{RESET}")
        sys.exit(1)

def is_vulnerable(installed, affected, fixed):
    """
    Compare installed version with affected/fixed.
    Return True if installed version is vulnerable.
    """
    if affected and installed in affected:
        return True

    if fixed:
        
        if pyalpm.vercmp(installed, fixed[0]) < 0:
            return True

    return False

def main():
    print("[*] Collecting installed packages...")
    installed_pkgs = get_installed_packages()

    print("[*] Fetching Arch Security Tracker data...")
    secdata = load_security_data()

    vulnerable = []

    for advisory in secdata:
        packages = advisory.get("packages", [])
        affected = advisory.get("affected") or []
        fixed = advisory.get("fixed") or []
        cves = advisory.get("issues", [])
        severity = advisory.get("severity", "Unknown")

        for pkg in packages:
            if pkg in installed_pkgs:
                inst_ver = installed_pkgs[pkg]
                if is_vulnerable(inst_ver, affected, fixed):
                    vulnerable.append({
                        "pkg": pkg,
                        "installed": inst_ver,
                        "affected": ", ".join(affected) if affected else "N/A",
                        "fixed": fixed[0] if fixed else None,
                        "cves": cves,
                        "severity": severity,
                        "advisory": advisory.get("name")
                    })

    if not vulnerable:
        print(f"\n{GREEN} No vulnerable packages detected.{RESET}")
        return

    print(f"\n{RED} Vulnerable packages found:{RESET}\n")
    for v in vulnerable:
        print(f"- {v['pkg']} (installed {v['installed']})")
        print(f"  Advisory: {v['advisory']}")
        print(f"  Affected: {v['affected']}")
        print(f"  Fixed: {v['fixed'] or 'Not yet fixed'}")
        print(f"  Severity: {v['severity']}")
        print(f"  CVEs: {', '.join(v['cves']) if v['cves'] else 'N/A'}")

        if v['fixed']:
            print(f"  Suggested fix: {GREEN}sudo pacman -Syu {v['pkg']}{RESET}\n")
        else:
            print(f"  {YELLOW}Suggested action: No fixed version yet. Monitor Arch tracker.{RESET}\n")

if __name__ == "__main__":
    main()
